Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Brute Force method1.
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res = new int[2];
        for(int i=0;i<nums.length;i++){
            res[0]=i;
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                    res[1]=j;
                    return res;
                }
            }
        }
        return null;
    }
}

Brute Force Method2
减少数组赋值操作，减少了中间变量的创建，时间复杂度更优
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++){
            for(int j = i + 1; j<nums.length; j++){
                if(nums[j] == target-nums[i]){
                    return new int[]{i,j};
                }
            }
        }
        throw new IllegalArgumentException("No two sum solution");
        
    }
}


Using one-pass hash table, it's faster and more easy to understand
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i<nums.length; i++){
            int sub = target - nums[i];
            if(map.containsKey(sub)){
                return new int[] {map.get(sub), i};
            }
            map.put(nums[i],i);
        }
        throw new IllegalArgumentException("No two solution");
    }
}
